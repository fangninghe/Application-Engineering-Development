/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Customer;

import Business.Activity.Activity;
import Business.Order.CustomerOrderCatalog;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Session.Session;
import Business.UserAcount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Alex
 */
public class ViewOrderJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private CustomerOrderCatalog customerOrderCatalog;
    private UserAccount userAccount;

    /**
     * Creates new form ViewOrderJPanel
     */
    public ViewOrderJPanel(JPanel userProcessContainer, CustomerOrderCatalog customerOrderCatalog, UserAccount userAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.customerOrderCatalog = customerOrderCatalog;
        this.userAccount = userAccount;
        populateOrderTable();
    }

    private void populateOrderTable() {
        int i = 1;
        DefaultTableModel dtm = (DefaultTableModel) OrderTable.getModel();
        dtm.setRowCount(0);
        for (Order o : customerOrderCatalog.getCustomerOrderCatalog()) {
            Object row[] = new Object[4];
            row[0] = i;
            row[1] = o;
            row[2] = o.getSale().getName();
            row[3] = o.getStatus();

            dtm.addRow(row);
            i++;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        OrderTable = new javax.swing.JTable();
        btnView1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        OrderItemTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnVIP = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        jLabel1.setText("Order List");

        OrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Order Number", "Order ID", "Sale", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(OrderTable);

        btnView1.setText("View Detials");
        btnView1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnView1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Order Item");

        OrderItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Quantity", "Price", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(OrderItemTable);

        jLabel4.setText("Total Amount");

        txtTotal.setEditable(false);

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnCheckOut.setText("Check Out");
        btnCheckOut.setToolTipText("");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnVIP.setText("VIP Short Cut");
        btnVIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVIPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 627, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(btnView1))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(btnBack)
                .addGap(157, 157, 157)
                .addComponent(btnCheckOut)
                .addGap(55, 55, 55)
                .addComponent(btnCancel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnVIP, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnBack, btnCancel, btnCheckOut});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnView1)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(btnVIP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnCheckOut)
                    .addComponent(btnCancel))
                .addGap(0, 29, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnView1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnView1ActionPerformed
        int selectedRow = OrderTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first to view detail", "Warning", JOptionPane.WARNING_MESSAGE);

        } else {
            Order order = (Order) OrderTable.getValueAt(selectedRow, 1);
            DefaultTableModel dtm = (DefaultTableModel) OrderItemTable.getModel();
            dtm.setRowCount(0);
            for (OrderItem oi : order.getOrderItemList()) {
                Object row[] = new Object[4];
                row[0] = oi;
                row[1] = oi.getQuantity();
                row[2] = oi.getSalesPrice();
                row[3] = oi.getQuantity() * oi.getSalesPrice();

                dtm.addRow(row);
                order.calculateAmount();
                txtTotal.setText(String.valueOf(order.getAmount()));
            }
        }// TODO add your handling code here:
    }//GEN-LAST:event_btnView1ActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);// TODO add your handling code here:
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        int selectedRow = OrderTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first to view detail", "Warning", JOptionPane.WARNING_MESSAGE);

        } else {
            Order order = (Order) OrderTable.getValueAt(selectedRow, 1);
            if (order.getStatus().equals("Initilization")) {
                JOptionPane.showMessageDialog(null, "The order is just initilized!!", "Warning", JOptionPane.WARNING_MESSAGE);

            } else if (order.getStatus().equals("Finished")) {
                JOptionPane.showMessageDialog(null, "The order is done!!", "Warning", JOptionPane.WARNING_MESSAGE);

            } else if (order.getStatus().equals("Cancel")) {
                JOptionPane.showMessageDialog(null, "The order is canceled already!!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure to submit the order?", "Information", dialogButton);
                if (dialogResult == JOptionPane.YES_OPTION) {

                    order.setStatus("Finished");
                    int aboveTarget = 0, belowTarget = 0;
                    for (OrderItem orderItem : order.getOrderItemList()) {
                        orderItem.getProduct().addProfit(orderItem.getQuantity() * orderItem.getSalesPrice());
                        if (orderItem.getSalesPrice() > orderItem.getProduct().getTargetPrice()) {
                            aboveTarget += orderItem.getQuantity();
                        }
                        if (orderItem.getSalesPrice() < orderItem.getProduct().getTargetPrice()) {
                            belowTarget += orderItem.getQuantity();
                        }
                        order.getSale().aboveTarget(aboveTarget);
                        order.getSale().belowTarget(belowTarget);
                        order.calculateAmount();
                        order.getSale().Profit(order.getAmount());
                        order.getCustomer().Consume(order.getAmount());
                    }
                    populateOrderTable();
                }
            }
        }// TODO add your handling code here:
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        int selectedRow = OrderTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first to view detail", "Warning", JOptionPane.WARNING_MESSAGE);

        } else {
            Order order = (Order) OrderTable.getValueAt(selectedRow, 1);
            if (order.getStatus().equals("Finished")) {
                JOptionPane.showMessageDialog(null, "The order is done!!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else if (order.getStatus().equals("Cancel")) {
                JOptionPane.showMessageDialog(null, "The order is canceled already!!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure to cancel the order?", "Information", dialogButton);
                if (dialogResult == JOptionPane.YES_OPTION) {
                    order.setStatus("Cancel");
                    for (OrderItem orderItem : order.getOrderItemList()) {
                        orderItem.getProduct().setAvailablity(orderItem.getProduct().getAvailablity() + orderItem.getQuantity());
                    }
                    OrderItemTable.removeAll();
                    populateOrderTable();
                }
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnVIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVIPActionPerformed
        int selectedRow = OrderTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first to view detail", "Warning", JOptionPane.WARNING_MESSAGE);

        } else {
            Order order = (Order) OrderTable.getValueAt(selectedRow, 1);
            for (OrderItem orderItem : order.getOrderItemList()) {
                if (orderItem.getSalesPrice() > orderItem.getProduct().getFloorPrice()) {
                    order.setStatus("Finished");
                    JOptionPane.showMessageDialog(null, "Thanks for buying!!", "Information", JOptionPane.WARNING_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Price should be reasonable...", "Information", JOptionPane.WARNING_MESSAGE);
                }
            }
            populateOrderTable();

            int lastSession = userAccount.getSessionHistory().getSessionList().size() - 1;
            Session session = userAccount.getSessionHistory().getSessionList().get(lastSession);
            Activity activity = session.getActivityHistory().addActivity();
            activity.setName("VIP BUY");
            activity.setUserAccount(userAccount);
            if (userAccount.getCustomer().getStatus().equals("VIP")) {
                activity.setStatus("Normal");
                int aboveTarget = 0, belowTarget = 0;
                for (OrderItem orderItem : order.getOrderItemList()) {
                    orderItem.getProduct().addProfit(orderItem.getQuantity() * orderItem.getSalesPrice());
                    if (orderItem.getSalesPrice() > orderItem.getProduct().getTargetPrice()) {
                        aboveTarget += orderItem.getQuantity();
                    }
                    if (orderItem.getSalesPrice() < orderItem.getProduct().getTargetPrice()) {
                        belowTarget += orderItem.getQuantity();
                    }
                    order.getSale().aboveTarget(aboveTarget);
                    order.getSale().belowTarget(belowTarget);
                    order.calculateAmount();
                    order.getSale().Profit(order.getAmount());
                    order.getCustomer().Consume(order.getAmount());
                }
            } else {
                activity.setStatus("Not a VIP!!");
            }
        }


    }//GEN-LAST:event_btnVIPActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable OrderItemTable;
    private javax.swing.JTable OrderTable;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnVIP;
    private javax.swing.JButton btnView1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
